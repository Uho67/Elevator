<?php
/**
 * Created by PhpStorm.
 * User: dmitriy
 * Date: 2019-10-28
 * Time: 13:42
 */

namespace Mytest\Elevator\Controller\Adminhtml;

use Magento\Framework\View\Result\PageFactory;
use Psr\Log\LoggerInterface;
use Mytest\Elevator\Api\BaseElevatorRepositoryInterface as Repository;
use Magento\Backend\App\Action;
use Magento\Backend\App\Action\Context;
use Magento\Framework\Session\SessionManagerInterface;

/**
 * Class AbstractElevator
 * @package Mytest\Elevator\Controller\Adminhtml
 */
abstract class AbstractElevator extends Action
{
    /**
     *
     */
    const ACL_RESOURCE          = "Mytest_Elevator::main_menu";
    /**
     *
     */
    const QUERY_PARAM_ID        = 'id';
    /**
     *
     */
    const TITLE                 = 'Elevator module';
    /**
     *
     */
    const MENU_ITEM             = 'MyModules_QuickOrder::statusAll';
    /**
     *
     */
    const BREADCRUMB_TITLE      = 'ELevator';
    /**
     * @var
     */
    protected $resultPage;
    /**
     * @var Repository
     */
    protected $repository;
    /**
     * @var SessionManagerInterface
     */
    protected $sessionManager;
    /**
     * @var LoggerInterface
     */
    protected $logger;
    /**
     * @var PageFactory
     */
    protected $pageFactory;

    /**
     * AbstractElevator constructor.
     *
     * @param PageFactory $pageFactory
     * @param LoggerInterface $logger
     * @param SessionManagerInterface $sessionManager
     * @param Repository $repository
     * @param Context $context
     */
    public function __construct(PageFactory $pageFactory,
                                LoggerInterface $logger,
                                SessionManagerInterface $sessionManager,
                                Repository $repository,
                                Context $context
    ) {
        $this->pageFactory    = $pageFactory;
        $this->logger         = $logger;
        $this->sessionManager = $sessionManager;
        $this->repository     = $repository;
        parent::__construct($context);
    }

    /**
     * @return \Magento\Framework\View\Result\Page
     */
    protected function _getResultPage()
    {
        if (null === $this->resultPage) {
            $this->resultPage = $this->pageFactory->create();
        }
        return $this->resultPage;
    }

    /**
     * @return \Magento\Framework\App\ResponseInterface|\Magento\Framework\Controller\ResultInterface
     */
    public function execute()
    {
        $this->_setPageData();
        return $this->resultPage;
    }

    /**
     * @return $this
     */
    protected function _setPageData()
    {
        $resultPage = $this->_getResultPage();
        $resultPage->setActiveMenu(static::MENU_ITEM);
        $resultPage->getConfig()->getTitle()->prepend((__(static::TITLE)));
        $resultPage->addBreadcrumb(__(static::BREADCRUMB_TITLE), __(static::BREADCRUMB_TITLE));
        $resultPage->addBreadcrumb(__(static::BREADCRUMB_TITLE), __(static::BREADCRUMB_TITLE));
        return $this;
    }

    /**
     * @return bool
     */
    public function _isAllowed()
    {
        $result = parent::_isAllowed(); // TODO: Change the autogenerated stub
        $result = $result && $this->_authorization->isAllowed($this::ACL_RESOURCE);
        return $result;
    }

    /**
     * @return \Magento\Framework\App\ResponseInterface
     */
    protected function redirectToGrid()
    {
        return $this->_redirect('*/*/listing');
    }
}
